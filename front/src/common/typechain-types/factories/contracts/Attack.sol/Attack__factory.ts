/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Attack,
  AttackInterface,
} from "../../../contracts/Attack.sol/Attack";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "raffleCa",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "isTriggered",
        type: "bool",
      },
    ],
    name: "AttackEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "raffleId",
        type: "uint256",
      },
    ],
    name: "attack",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimNfts",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610c9e380380610c9e8339818101604052810190610032919061011c565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610149565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e9826100be565b9050919050565b6100f9816100de565b811461010457600080fd5b50565b600081519050610116816100f0565b92915050565b600060208284031215610132576101316100b9565b5b600061014084828501610107565b91505092915050565b610b46806101586000396000f3fe6080604052600436106100295760003560e01c806364dd891a1461002e578063bcc08b2c1461004a575b600080fd5b610048600480360381019061004391906105bd565b610061565b005b34801561005657600080fd5b5061005f6103cb565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327d7e46d836040518263ffffffff1660e01b81526004016100bd91906105f9565b61012060405180830381865afa1580156100db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ff9190610840565b9050600081608001518260a00151610117919061089d565b6fffffffffffffffffffffffffffffffff1690506000808360a001516fffffffffffffffffffffffffffffffff1644428460405160200161015a93929190610902565b6040516020818303038152906040528051906020012060001c61017d919061096e565b905060008382106102d45760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d3be269e348888608001516040518463ffffffff1660e01b81526004016101e89291906109ae565b6000604051808303818588803b15801561020157600080fd5b505af1158015610215573d6000803e3d6000fd5b5050505050600160405180604001604052808760c0015173ffffffffffffffffffffffffffffffffffffffff1681526020018760200151815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550506001905061038c565b60003373ffffffffffffffffffffffffffffffffffffffff16346040516102fa90610a08565b60006040518083038185875af1925050503d8060008114610337576040519150601f19603f3d011682016040523d82523d6000602084013e61033c565b606091505b505090508061038a5734600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b505b7f2e36bcee0318550cb7552715e98edb1a97edb8b52dee82a59aa7d77fc318877c816040516103bb9190610a38565b60405180910390a1505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638ae97a3a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561043357600080fd5b505af1158015610447573d6000803e3d6000fd5b5050505060005b6001805490508110156105755760006001828154811061047157610470610a53565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600183815481106104bb576104ba610a53565b5b90600052602060002090600202016001015490508173ffffffffffffffffffffffffffffffffffffffff166323b872dd30600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b815260040161052e93929190610a91565b600060405180830381600087803b15801561054857600080fd5b505af115801561055c573d6000803e3d6000fd5b505050505050808061056d90610ac8565b91505061044e565b50565b6000604051905090565b600080fd5b6000819050919050565b61059a81610587565b81146105a557600080fd5b50565b6000813590506105b781610591565b92915050565b6000602082840312156105d3576105d2610582565b5b60006105e1848285016105a8565b91505092915050565b6105f381610587565b82525050565b600060208201905061060e60008301846105ea565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61066282610619565b810181811067ffffffffffffffff821117156106815761068061062a565b5b80604052505050565b6000610694610578565b90506106a08282610659565b919050565b6000815190506106b481610591565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6106df816106ba565b81146106ea57600080fd5b50565b6000815190506106fc816106d6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061072d82610702565b9050919050565b61073d81610722565b811461074857600080fd5b50565b60008151905061075a81610734565b92915050565b6000610120828403121561077757610776610614565b5b61078261012061068a565b90506000610792848285016106a5565b60008301525060206107a6848285016106a5565b60208301525060406107ba848285016106a5565b60408301525060606107ce848285016106a5565b60608301525060806107e2848285016106ed565b60808301525060a06107f6848285016106ed565b60a08301525060c061080a8482850161074b565b60c08301525060e061081e8482850161074b565b60e0830152506101006108338482850161074b565b6101008301525092915050565b6000610120828403121561085757610856610582565b5b600061086584828501610760565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108a8826106ba565b91506108b3836106ba565b925082820390506fffffffffffffffffffffffffffffffff8111156108db576108da61086e565b5b92915050565b6000819050919050565b6108fc6108f782610587565b6108e1565b82525050565b600061090e82866108eb565b60208201915061091e82856108eb565b60208201915061092e82846108eb565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061097982610587565b915061098483610587565b9250826109945761099361093f565b5b828206905092915050565b6109a8816106ba565b82525050565b60006040820190506109c360008301856105ea565b6109d0602083018461099f565b9392505050565b600081905092915050565b50565b60006109f26000836109d7565b91506109fd826109e2565b600082019050919050565b6000610a13826109e5565b9150819050919050565b60008115159050919050565b610a3281610a1d565b82525050565b6000602082019050610a4d6000830184610a29565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610a8b81610722565b82525050565b6000606082019050610aa66000830186610a82565b610ab36020830185610a82565b610ac060408301846105ea565b949350505050565b6000610ad382610587565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b0557610b0461086e565b5b60018201905091905056fea2646970667358221220ea3e6d5c69d82d9a5b68a4506408f0c7f72d01d5eada396457cf97d76bfd3daf64736f6c63430008120033";

type AttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Attack__factory extends ContractFactory {
  constructor(...args: AttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    raffleCa: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Attack> {
    return super.deploy(raffleCa, overrides || {}) as Promise<Attack>;
  }
  override getDeployTransaction(
    raffleCa: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(raffleCa, overrides || {});
  }
  override attach(address: string): Attack {
    return super.attach(address) as Attack;
  }
  override connect(signer: Signer): Attack__factory {
    return super.connect(signer) as Attack__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackInterface {
    return new utils.Interface(_abi) as AttackInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Attack {
    return new Contract(address, _abi, signerOrProvider) as Attack;
  }
}
