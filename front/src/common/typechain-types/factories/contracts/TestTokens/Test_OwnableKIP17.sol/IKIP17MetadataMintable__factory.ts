/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IKIP17MetadataMintable,
  IKIP17MetadataMintableInterface,
} from "../../../../contracts/TestTokens/Test_OwnableKIP17.sol/IKIP17MetadataMintable";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "addMinter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isMinter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "tokenURI",
        type: "string",
      },
    ],
    name: "mintWithTokenURI",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceMinter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IKIP17MetadataMintable__factory {
  static readonly abi = _abi;
  static createInterface(): IKIP17MetadataMintableInterface {
    return new utils.Interface(_abi) as IKIP17MetadataMintableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IKIP17MetadataMintable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IKIP17MetadataMintable;
  }
}
