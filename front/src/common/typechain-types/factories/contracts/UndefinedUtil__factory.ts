/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  UndefinedUtil,
  UndefinedUtilInterface,
} from "../../contracts/UndefinedUtil";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "listedNftList",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "getBalanceOfListedNft",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "nftCa",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct UndefinedUtil.BalanceOfNft[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenCa",
        type: "address",
      },
    ],
    name: "getName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftCa",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getOwnerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenCa",
        type: "address",
      },
    ],
    name: "getSymbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenCa",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getTokenUri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenCa",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "getTokenUriBatch",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenCa",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "string[]",
            name: "tokenUris",
            type: "string[]",
          },
        ],
        internalType: "struct UndefinedUtil.TokensOfOwnerWithUri",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenCa",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "getTokensOfOwner",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "nftCa",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct UndefinedUtil.BalanceOfNft[]",
        name: "balanceOfNftList",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "getTokensOfOwnerBatch",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenCa",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
        ],
        internalType: "struct UndefinedUtil.TokenOfOwner[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "listedNftList",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "getTokensOfOwnerWithListedNft",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenCa",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
        ],
        internalType: "struct UndefinedUtil.TokenOfOwner[]",
        name: "tokensOfOwner",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611a04806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063948d137f11610066578063948d137f14610158578063c9b2e52214610188578063d3eb2648146101b8578063d5d03e21146101e8578063fab95f361461021857610093565b80635fd4b08a146100985780636eca506c146100c857806372097945146100f85780637278073114610128575b600080fd5b6100b260048036038101906100ad9190610e14565b610248565b6040516100bf9190610ed1565b60405180910390f35b6100e260048036038101906100dd9190610f58565b6102c5565b6040516100ef91906111f2565b60405180910390f35b610112600480360381019061010d919061126a565b610476565b60405161011f91906113a8565b60405180910390f35b610142600480360381019061013d91906113ca565b610635565b60405161014f9190611479565b60405180910390f35b610172600480360381019061016d91906114f1565b610822565b60405161017f919061162f565b60405180910390f35b6101a2600480360381019061019d9190610e14565b6109c2565b6040516101af9190610ed1565b60405180910390f35b6101d260048036038101906101cd91906114f1565b610a3f565b6040516101df91906113a8565b60405180910390f35b61020260048036038101906101fd919061167d565b610bf9565b60405161020f91906116cc565b60405180910390f35b610232600480360381019061022d919061167d565b610c82565b60405161023f9190610ed1565b60405180910390f35b60608173ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610295573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102be9190611808565b9050919050565b6102cd610d0b565b60008383905067ffffffffffffffff8111156102ec576102eb6116ec565b5b60405190808252806020026020018201604052801561031f57816020015b606081526020019060019003908161030a5790505b50905060005b848490508110156103f9578573ffffffffffffffffffffffffffffffffffffffff1663c87b56dd86868481811061035f5761035e611851565b5b905060200201356040518263ffffffff1660e01b8152600401610382919061188f565b600060405180830381865afa15801561039f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103c89190611808565b8282815181106103db576103da611851565b5b602002602001018190525080806103f1906118d9565b915050610325565b5060405180606001604052808673ffffffffffffffffffffffffffffffffffffffff168152602001858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508152602001828152509150509392505050565b606060008484905067ffffffffffffffff811115610497576104966116ec565b5b6040519080825280602002602001820160405280156104d057816020015b6104bd610d42565b8152602001906001900390816104b55790505b50905060005b858590508110156106295760008686838181106104f6576104f5611851565b5b905060400201600001602081019061050e9190610e14565b9050600087878481811061052557610524611851565b5b90506040020160200135905060005b818110156106135760405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16632f745c598a856040518363ffffffff1660e01b815260040161059e929190611921565b602060405180830381865afa1580156105bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105df919061195f565b8152508585815181106105f5576105f4611851565b5b6020026020010181905250808061060b906118d9565b915050610534565b5050508080610621906118d9565b9150506104d6565b50809150509392505050565b606060008373ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040161067291906116cc565b602060405180830381865afa15801561068f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b3919061195f565b90506000810361070f57600067ffffffffffffffff8111156106d8576106d76116ec565b5b6040519080825280602002602001820160405280156107065781602001602082028036833780820191505090505b5091505061081c565b60008167ffffffffffffffff81111561072b5761072a6116ec565b5b6040519080825280602002602001820160405280156107595781602001602082028036833780820191505090505b50905060005b82811015610815578573ffffffffffffffffffffffffffffffffffffffff16632f745c5986836040518363ffffffff1660e01b81526004016107a2929190611921565b602060405180830381865afa1580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e3919061195f565b8282815181106107f6576107f5611851565b5b602002602001018181525050808061080d906118d9565b91505061075f565b5080925050505b92915050565b606060008484905067ffffffffffffffff811115610843576108426116ec565b5b60405190808252806020026020018201604052801561087c57816020015b610869610d72565b8152602001906001900390816108615790505b50905060005b858590508110156109b65760008686838181106108a2576108a1611851565b5b90506020020160208101906108b79190610e14565b73ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b81526004016108ef91906116cc565b602060405180830381865afa15801561090c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610930919061195f565b905060405180604001604052808888858181106109505761094f611851565b5b90506020020160208101906109659190610e14565b73ffffffffffffffffffffffffffffffffffffffff1681526020018281525083838151811061099757610996611851565b5b60200260200101819052505080806109ae906118d9565b915050610882565b50809150509392505050565b60608173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a0f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a389190611808565b9050919050565b606060005b84849050811015610bf1576000858583818110610a6457610a63611851565b5b9050602002016020810190610a799190610e14565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401610ab691906116cc565b602060405180830381865afa158015610ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af7919061195f565b905060005b81811015610bdb5760405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16632f745c5989856040518363ffffffff1660e01b8152600401610b66929190611921565b602060405180830381865afa158015610b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba7919061195f565b815250858581518110610bbd57610bbc611851565b5b60200260200101819052508080610bd3906118d9565b915050610afc565b5050508080610be9906118d9565b915050610a44565b509392505050565b6000808390508073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610c38919061188f565b602060405180830381865afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7991906119a1565b91505092915050565b60608273ffffffffffffffffffffffffffffffffffffffff1663c87b56dd836040518263ffffffff1660e01b8152600401610cbd919061188f565b600060405180830381865afa158015610cda573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d039190611808565b905092915050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610de182610db6565b9050919050565b610df181610dd6565b8114610dfc57600080fd5b50565b600081359050610e0e81610de8565b92915050565b600060208284031215610e2a57610e29610dac565b5b6000610e3884828501610dff565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e7b578082015181840152602081019050610e60565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ea382610e41565b610ead8185610e4c565b9350610ebd818560208601610e5d565b610ec681610e87565b840191505092915050565b60006020820190508181036000830152610eeb8184610e98565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610f1857610f17610ef3565b5b8235905067ffffffffffffffff811115610f3557610f34610ef8565b5b602083019150836020820283011115610f5157610f50610efd565b5b9250929050565b600080600060408486031215610f7157610f70610dac565b5b6000610f7f86828701610dff565b935050602084013567ffffffffffffffff811115610fa057610f9f610db1565b5b610fac86828701610f02565b92509250509250925092565b610fc181610dd6565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61100681610ff3565b82525050565b60006110188383610ffd565b60208301905092915050565b6000602082019050919050565b600061103c82610fc7565b6110468185610fd2565b935061105183610fe3565b8060005b83811015611082578151611069888261100c565b975061107483611024565b925050600181019050611055565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006110d782610e41565b6110e181856110bb565b93506110f1818560208601610e5d565b6110fa81610e87565b840191505092915050565b600061111183836110cc565b905092915050565b6000602082019050919050565b60006111318261108f565b61113b818561109a565b93508360208202850161114d856110ab565b8060005b85811015611189578484038952815161116a8582611105565b945061117583611119565b925060208a01995050600181019050611151565b50829750879550505050505092915050565b60006060830160008301516111b36000860182610fb8565b50602083015184820360208601526111cb8282611031565b915050604083015184820360408601526111e58282611126565b9150508091505092915050565b6000602082019050818103600083015261120c818461119b565b905092915050565b60008083601f84011261122a57611229610ef3565b5b8235905067ffffffffffffffff81111561124757611246610ef8565b5b60208301915083604082028301111561126357611262610efd565b5b9250929050565b60008060006040848603121561128357611282610dac565b5b600084013567ffffffffffffffff8111156112a1576112a0610db1565b5b6112ad86828701611214565b935093505060206112c086828701610dff565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60408201600082015161130c6000850182610fb8565b50602082015161131f6020850182610ffd565b50505050565b600061133183836112f6565b60408301905092915050565b6000602082019050919050565b6000611355826112ca565b61135f81856112d5565b935061136a836112e6565b8060005b8381101561139b5781516113828882611325565b975061138d8361133d565b92505060018101905061136e565b5085935050505092915050565b600060208201905081810360008301526113c2818461134a565b905092915050565b600080604083850312156113e1576113e0610dac565b5b60006113ef85828601610dff565b925050602061140085828601610dff565b9150509250929050565b600082825260208201905092915050565b600061142682610fc7565b611430818561140a565b935061143b83610fe3565b8060005b8381101561146c578151611453888261100c565b975061145e83611024565b92505060018101905061143f565b5085935050505092915050565b60006020820190508181036000830152611493818461141b565b905092915050565b60008083601f8401126114b1576114b0610ef3565b5b8235905067ffffffffffffffff8111156114ce576114cd610ef8565b5b6020830191508360208202830111156114ea576114e9610efd565b5b9250929050565b60008060006040848603121561150a57611509610dac565b5b600084013567ffffffffffffffff81111561152857611527610db1565b5b6115348682870161149b565b9350935050602061154786828701610dff565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6040820160008201516115936000850182610fb8565b5060208201516115a66020850182610ffd565b50505050565b60006115b8838361157d565b60408301905092915050565b6000602082019050919050565b60006115dc82611551565b6115e6818561155c565b93506115f18361156d565b8060005b8381101561162257815161160988826115ac565b9750611614836115c4565b9250506001810190506115f5565b5085935050505092915050565b6000602082019050818103600083015261164981846115d1565b905092915050565b61165a81610ff3565b811461166557600080fd5b50565b60008135905061167781611651565b92915050565b6000806040838503121561169457611693610dac565b5b60006116a285828601610dff565b92505060206116b385828601611668565b9150509250929050565b6116c681610dd6565b82525050565b60006020820190506116e160008301846116bd565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61172482610e87565b810181811067ffffffffffffffff82111715611743576117426116ec565b5b80604052505050565b6000611756610da2565b9050611762828261171b565b919050565b600067ffffffffffffffff821115611782576117816116ec565b5b61178b82610e87565b9050602081019050919050565b60006117ab6117a684611767565b61174c565b9050828152602081018484840111156117c7576117c66116e7565b5b6117d2848285610e5d565b509392505050565b600082601f8301126117ef576117ee610ef3565b5b81516117ff848260208601611798565b91505092915050565b60006020828403121561181e5761181d610dac565b5b600082015167ffffffffffffffff81111561183c5761183b610db1565b5b611848848285016117da565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61188981610ff3565b82525050565b60006020820190506118a46000830184611880565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118e482610ff3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611916576119156118aa565b5b600182019050919050565b600060408201905061193660008301856116bd565b6119436020830184611880565b9392505050565b60008151905061195981611651565b92915050565b60006020828403121561197557611974610dac565b5b60006119838482850161194a565b91505092915050565b60008151905061199b81610de8565b92915050565b6000602082840312156119b7576119b6610dac565b5b60006119c58482850161198c565b9150509291505056fea264697066735822122012398a4f29b75bb9bd51dd2cf1a42377d869cdfdb729b14ecbd29629c6789dbd64736f6c63430008120033";

type UndefinedUtilConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UndefinedUtilConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UndefinedUtil__factory extends ContractFactory {
  constructor(...args: UndefinedUtilConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UndefinedUtil> {
    return super.deploy(overrides || {}) as Promise<UndefinedUtil>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UndefinedUtil {
    return super.attach(address) as UndefinedUtil;
  }
  override connect(signer: Signer): UndefinedUtil__factory {
    return super.connect(signer) as UndefinedUtil__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UndefinedUtilInterface {
    return new utils.Interface(_abi) as UndefinedUtilInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UndefinedUtil {
    return new Contract(address, _abi, signerOrProvider) as UndefinedUtil;
  }
}
