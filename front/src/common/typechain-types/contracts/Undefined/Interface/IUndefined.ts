/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IUndefinedInterface extends utils.Interface {
  functions: {
    "buyTickets(uint96,uint16)": FunctionFragment;
    "buyer(uint256,uint256)": FunctionFragment;
    "chooseWinner(uint96,uint256)": FunctionFragment;
    "claimAllNfts()": FunctionFragment;
    "claimNftByIndex(uint256)": FunctionFragment;
    "claimNftForFailedSeller(uint96)": FunctionFragment;
    "claimableBalance(address)": FunctionFragment;
    "claimableNft(address,uint256)": FunctionFragment;
    "getClaimableNftsLength(address)": FunctionFragment;
    "getTicketOwnerByIndex(uint256,uint256)": FunctionFragment;
    "raffles(uint256)": FunctionFragment;
    "registerRaffle(address,uint256,uint16,uint144,uint256)": FunctionFragment;
    "withdrawFee(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyTickets"
      | "buyer"
      | "chooseWinner"
      | "claimAllNfts"
      | "claimNftByIndex"
      | "claimNftForFailedSeller"
      | "claimableBalance"
      | "claimableNft"
      | "getClaimableNftsLength"
      | "getTicketOwnerByIndex"
      | "raffles"
      | "registerRaffle"
      | "withdrawFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyTickets",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "chooseWinner",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllNfts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimNftByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimNftForFailedSeller",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableNft",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableNftsLength",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketOwnerByIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "raffles",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRaffle",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chooseWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllNfts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimNftByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimNftForFailedSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableNftsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raffles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "BuyTickets(uint256,address,uint256,uint256,uint256)": EventFragment;
    "ChooseWinner(uint256,address,uint256,uint256)": EventFragment;
    "ClaimAllNfts(address,uint256[])": EventFragment;
    "ClaimBalance(address,uint256,uint256)": EventFragment;
    "ClaimNft(address,uint256)": EventFragment;
    "RegisterRaffle(uint256,uint256,address,uint256,uint256,uint256,address)": EventFragment;
    "WithdrawFee(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyTickets"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChooseWinner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimAllNfts"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimBalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterRaffle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFee"): EventFragment;
}

export interface BuyTicketsEventObject {
  raffleId: BigNumber;
  buyer: string;
  fromIndex: BigNumber;
  toIndex: BigNumber;
  leftTickets: BigNumber;
}
export type BuyTicketsEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  BuyTicketsEventObject
>;

export type BuyTicketsEventFilter = TypedEventFilter<BuyTicketsEvent>;

export interface ChooseWinnerEventObject {
  raffleId: BigNumber;
  winner: string;
  winnerTicketIndex: BigNumber;
  settlement: BigNumber;
}
export type ChooseWinnerEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  ChooseWinnerEventObject
>;

export type ChooseWinnerEventFilter = TypedEventFilter<ChooseWinnerEvent>;

export interface ClaimAllNftsEventObject {
  claimer: string;
  raffleIds: BigNumber[];
}
export type ClaimAllNftsEvent = TypedEvent<
  [string, BigNumber[]],
  ClaimAllNftsEventObject
>;

export type ClaimAllNftsEventFilter = TypedEventFilter<ClaimAllNftsEvent>;

export interface ClaimBalanceEventObject {
  claimer: string;
  amount: BigNumber;
  afterBalance: BigNumber;
}
export type ClaimBalanceEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimBalanceEventObject
>;

export type ClaimBalanceEventFilter = TypedEventFilter<ClaimBalanceEvent>;

export interface ClaimNftEventObject {
  claimer: string;
  raffleId: BigNumber;
}
export type ClaimNftEvent = TypedEvent<
  [string, BigNumber],
  ClaimNftEventObject
>;

export type ClaimNftEventFilter = TypedEventFilter<ClaimNftEvent>;

export interface RegisterRaffleEventObject {
  raffleId: BigNumber;
  tokenId: BigNumber;
  nftCa: string;
  ticketPrice: BigNumber;
  totalTickets: BigNumber;
  endTime: BigNumber;
  seller: string;
}
export type RegisterRaffleEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber, string],
  RegisterRaffleEventObject
>;

export type RegisterRaffleEventFilter = TypedEventFilter<RegisterRaffleEvent>;

export interface WithdrawFeeEventObject {
  to: string;
  amount: BigNumber;
}
export type WithdrawFeeEvent = TypedEvent<
  [string, BigNumber],
  WithdrawFeeEventObject
>;

export type WithdrawFeeEventFilter = TypedEventFilter<WithdrawFeeEvent>;

export interface IUndefined extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUndefinedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyTickets(
      raffleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyer(
      raffleId: PromiseOrValue<BigNumberish>,
      ticketIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    chooseWinner(
      raffleId: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAllNfts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimNftByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimNftForFailedSeller(
      raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimableBalance(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimableNft(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        raffleId: BigNumber;
        ca: string;
        tokenId: BigNumber;
      }
    >;

    getClaimableNftsLength(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTicketOwnerByIndex(
      raffleId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    raffles(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        number,
        number,
        string,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        raffleId: BigNumber;
        ticketPrice: BigNumber;
        totalTickets: number;
        leftTickets: number;
        nftCa: string;
        tokenId: BigNumber;
        endTime: BigNumber;
        seller: string;
        winner: string;
      }
    >;

    registerRaffle(
      nftCa: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      totalTickets: PromiseOrValue<BigNumberish>,
      ticketPrice: PromiseOrValue<BigNumberish>,
      day: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyTickets(
    raffleId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyer(
    raffleId: PromiseOrValue<BigNumberish>,
    ticketIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  chooseWinner(
    raffleId: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAllNfts(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimNftByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimNftForFailedSeller(
    raffleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimableBalance(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimableNft(
    owner: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      raffleId: BigNumber;
      ca: string;
      tokenId: BigNumber;
    }
  >;

  getClaimableNftsLength(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTicketOwnerByIndex(
    raffleId: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  raffles(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      number,
      number,
      string,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      raffleId: BigNumber;
      ticketPrice: BigNumber;
      totalTickets: number;
      leftTickets: number;
      nftCa: string;
      tokenId: BigNumber;
      endTime: BigNumber;
      seller: string;
      winner: string;
    }
  >;

  registerRaffle(
    nftCa: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    totalTickets: PromiseOrValue<BigNumberish>,
    ticketPrice: PromiseOrValue<BigNumberish>,
    day: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyTickets(
      raffleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyer(
      raffleId: PromiseOrValue<BigNumberish>,
      ticketIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    chooseWinner(
      raffleId: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAllNfts(overrides?: CallOverrides): Promise<void>;

    claimNftByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimNftForFailedSeller(
      raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimableBalance(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableNft(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        raffleId: BigNumber;
        ca: string;
        tokenId: BigNumber;
      }
    >;

    getClaimableNftsLength(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketOwnerByIndex(
      raffleId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    raffles(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        number,
        number,
        string,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        raffleId: BigNumber;
        ticketPrice: BigNumber;
        totalTickets: number;
        leftTickets: number;
        nftCa: string;
        tokenId: BigNumber;
        endTime: BigNumber;
        seller: string;
        winner: string;
      }
    >;

    registerRaffle(
      nftCa: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      totalTickets: PromiseOrValue<BigNumberish>,
      ticketPrice: PromiseOrValue<BigNumberish>,
      day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyTickets(uint256,address,uint256,uint256,uint256)"(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      fromIndex?: null,
      toIndex?: null,
      leftTickets?: null
    ): BuyTicketsEventFilter;
    BuyTickets(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      fromIndex?: null,
      toIndex?: null,
      leftTickets?: null
    ): BuyTicketsEventFilter;

    "ChooseWinner(uint256,address,uint256,uint256)"(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      winner?: PromiseOrValue<string> | null,
      winnerTicketIndex?: null,
      settlement?: null
    ): ChooseWinnerEventFilter;
    ChooseWinner(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      winner?: PromiseOrValue<string> | null,
      winnerTicketIndex?: null,
      settlement?: null
    ): ChooseWinnerEventFilter;

    "ClaimAllNfts(address,uint256[])"(
      claimer?: PromiseOrValue<string> | null,
      raffleIds?: null
    ): ClaimAllNftsEventFilter;
    ClaimAllNfts(
      claimer?: PromiseOrValue<string> | null,
      raffleIds?: null
    ): ClaimAllNftsEventFilter;

    "ClaimBalance(address,uint256,uint256)"(
      claimer?: PromiseOrValue<string> | null,
      amount?: null,
      afterBalance?: null
    ): ClaimBalanceEventFilter;
    ClaimBalance(
      claimer?: PromiseOrValue<string> | null,
      amount?: null,
      afterBalance?: null
    ): ClaimBalanceEventFilter;

    "ClaimNft(address,uint256)"(
      claimer?: PromiseOrValue<string> | null,
      raffleId?: PromiseOrValue<BigNumberish> | null
    ): ClaimNftEventFilter;
    ClaimNft(
      claimer?: PromiseOrValue<string> | null,
      raffleId?: PromiseOrValue<BigNumberish> | null
    ): ClaimNftEventFilter;

    "RegisterRaffle(uint256,uint256,address,uint256,uint256,uint256,address)"(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      tokenId?: null,
      nftCa?: null,
      ticketPrice?: null,
      totalTickets?: null,
      endTime?: null,
      seller?: PromiseOrValue<string> | null
    ): RegisterRaffleEventFilter;
    RegisterRaffle(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      tokenId?: null,
      nftCa?: null,
      ticketPrice?: null,
      totalTickets?: null,
      endTime?: null,
      seller?: PromiseOrValue<string> | null
    ): RegisterRaffleEventFilter;

    "WithdrawFee(address,uint256)"(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawFeeEventFilter;
    WithdrawFee(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawFeeEventFilter;
  };

  estimateGas: {
    buyTickets(
      raffleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyer(
      raffleId: PromiseOrValue<BigNumberish>,
      ticketIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chooseWinner(
      raffleId: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAllNfts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimNftByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimNftForFailedSeller(
      raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimableBalance(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableNft(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableNftsLength(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketOwnerByIndex(
      raffleId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffles(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerRaffle(
      nftCa: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      totalTickets: PromiseOrValue<BigNumberish>,
      ticketPrice: PromiseOrValue<BigNumberish>,
      day: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTickets(
      raffleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyer(
      raffleId: PromiseOrValue<BigNumberish>,
      ticketIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chooseWinner(
      raffleId: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAllNfts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimNftByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimNftForFailedSeller(
      raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimableBalance(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableNft(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableNftsLength(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicketOwnerByIndex(
      raffleId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raffles(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerRaffle(
      nftCa: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      totalTickets: PromiseOrValue<BigNumberish>,
      ticketPrice: PromiseOrValue<BigNumberish>,
      day: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
