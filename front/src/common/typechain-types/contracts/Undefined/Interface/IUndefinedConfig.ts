/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IUndefinedConfigInterface extends utils.Interface {
  functions: {
    "creatorInfo(address)": FunctionFragment;
    "deListNft(address)": FunctionFragment;
    "feeBox()": FunctionFragment;
    "feeNumerator()": FunctionFragment;
    "feeTo()": FunctionFragment;
    "isListed(address)": FunctionFragment;
    "listNft(address,address,uint8)": FunctionFragment;
    "listNft(address)": FunctionFragment;
    "maxTicketAmount()": FunctionFragment;
    "minTicketPrice()": FunctionFragment;
    "setFeeNumerator(uint16)": FunctionFragment;
    "setMaxTicketAmount(uint16)": FunctionFragment;
    "setMinTicketPrice(uint96)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "creatorInfo"
      | "deListNft"
      | "feeBox"
      | "feeNumerator"
      | "feeTo"
      | "isListed"
      | "listNft(address,address,uint8)"
      | "listNft(address)"
      | "maxTicketAmount"
      | "minTicketPrice"
      | "setFeeNumerator"
      | "setMaxTicketAmount"
      | "setMinTicketPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "creatorInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deListNft",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "feeBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isListed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listNft(address,address,uint8)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listNft(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTicketAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTicketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeNumerator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTicketAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinTicketPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "creatorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deListNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isListed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listNft(address,address,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listNft(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTicketAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTicketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTicketAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinTicketPrice",
    data: BytesLike
  ): Result;

  events: {
    "DeListNft(address)": EventFragment;
    "ListNft(address,address,uint256)": EventFragment;
    "SetCreatorInfo(address,uint256)": EventFragment;
    "SetFeeNumerator(uint256)": EventFragment;
    "SetMaxTicketAmount(uint256)": EventFragment;
    "SetMinTicketPrice(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeListNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCreatorInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeNumerator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxTicketAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinTicketPrice"): EventFragment;
}

export interface DeListNftEventObject {
  nftCa: string;
}
export type DeListNftEvent = TypedEvent<[string], DeListNftEventObject>;

export type DeListNftEventFilter = TypedEventFilter<DeListNftEvent>;

export interface ListNftEventObject {
  nftCa: string;
  creator: string;
  creatorFeeNumerator: BigNumber;
}
export type ListNftEvent = TypedEvent<
  [string, string, BigNumber],
  ListNftEventObject
>;

export type ListNftEventFilter = TypedEventFilter<ListNftEvent>;

export interface SetCreatorInfoEventObject {
  creator: string;
  creatorFeeNumerator: BigNumber;
}
export type SetCreatorInfoEvent = TypedEvent<
  [string, BigNumber],
  SetCreatorInfoEventObject
>;

export type SetCreatorInfoEventFilter = TypedEventFilter<SetCreatorInfoEvent>;

export interface SetFeeNumeratorEventObject {
  feeNumerator: BigNumber;
}
export type SetFeeNumeratorEvent = TypedEvent<
  [BigNumber],
  SetFeeNumeratorEventObject
>;

export type SetFeeNumeratorEventFilter = TypedEventFilter<SetFeeNumeratorEvent>;

export interface SetMaxTicketAmountEventObject {
  amount: BigNumber;
}
export type SetMaxTicketAmountEvent = TypedEvent<
  [BigNumber],
  SetMaxTicketAmountEventObject
>;

export type SetMaxTicketAmountEventFilter =
  TypedEventFilter<SetMaxTicketAmountEvent>;

export interface SetMinTicketPriceEventObject {
  price: BigNumber;
}
export type SetMinTicketPriceEvent = TypedEvent<
  [BigNumber],
  SetMinTicketPriceEventObject
>;

export type SetMinTicketPriceEventFilter =
  TypedEventFilter<SetMinTicketPriceEvent>;

export interface IUndefinedConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUndefinedConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    creatorInfo(
      nftCa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number] & { creator: string; creatorFeeNumerator: number }
    >;

    deListNft(
      nftCa: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeBox(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeNumerator(overrides?: CallOverrides): Promise<[number]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    isListed(
      nftCa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "listNft(address,address,uint8)"(
      nftCa: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      creatorFeeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "listNft(address)"(
      nftCa: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxTicketAmount(overrides?: CallOverrides): Promise<[number]>;

    minTicketPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFeeNumerator(
      feeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxTicketAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinTicketPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  creatorInfo(
    nftCa: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, number] & { creator: string; creatorFeeNumerator: number }
  >;

  deListNft(
    nftCa: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeBox(overrides?: CallOverrides): Promise<BigNumber>;

  feeNumerator(overrides?: CallOverrides): Promise<number>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  isListed(
    nftCa: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "listNft(address,address,uint8)"(
    nftCa: PromiseOrValue<string>,
    creator: PromiseOrValue<string>,
    creatorFeeNumerator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "listNft(address)"(
    nftCa: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxTicketAmount(overrides?: CallOverrides): Promise<number>;

  minTicketPrice(overrides?: CallOverrides): Promise<BigNumber>;

  setFeeNumerator(
    feeNumerator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxTicketAmount(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinTicketPrice(
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    creatorInfo(
      nftCa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number] & { creator: string; creatorFeeNumerator: number }
    >;

    deListNft(
      nftCa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeBox(overrides?: CallOverrides): Promise<BigNumber>;

    feeNumerator(overrides?: CallOverrides): Promise<number>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    isListed(
      nftCa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "listNft(address,address,uint8)"(
      nftCa: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      creatorFeeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "listNft(address)"(
      nftCa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxTicketAmount(overrides?: CallOverrides): Promise<number>;

    minTicketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeNumerator(
      feeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTicketAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinTicketPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DeListNft(address)"(nftCa?: null): DeListNftEventFilter;
    DeListNft(nftCa?: null): DeListNftEventFilter;

    "ListNft(address,address,uint256)"(
      nftCa?: null,
      creator?: null,
      creatorFeeNumerator?: null
    ): ListNftEventFilter;
    ListNft(
      nftCa?: null,
      creator?: null,
      creatorFeeNumerator?: null
    ): ListNftEventFilter;

    "SetCreatorInfo(address,uint256)"(
      creator?: null,
      creatorFeeNumerator?: null
    ): SetCreatorInfoEventFilter;
    SetCreatorInfo(
      creator?: null,
      creatorFeeNumerator?: null
    ): SetCreatorInfoEventFilter;

    "SetFeeNumerator(uint256)"(feeNumerator?: null): SetFeeNumeratorEventFilter;
    SetFeeNumerator(feeNumerator?: null): SetFeeNumeratorEventFilter;

    "SetMaxTicketAmount(uint256)"(amount?: null): SetMaxTicketAmountEventFilter;
    SetMaxTicketAmount(amount?: null): SetMaxTicketAmountEventFilter;

    "SetMinTicketPrice(uint256)"(price?: null): SetMinTicketPriceEventFilter;
    SetMinTicketPrice(price?: null): SetMinTicketPriceEventFilter;
  };

  estimateGas: {
    creatorInfo(
      nftCa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deListNft(
      nftCa: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeBox(overrides?: CallOverrides): Promise<BigNumber>;

    feeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    isListed(
      nftCa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listNft(address,address,uint8)"(
      nftCa: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      creatorFeeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "listNft(address)"(
      nftCa: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxTicketAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minTicketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeNumerator(
      feeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxTicketAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinTicketPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    creatorInfo(
      nftCa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deListNft(
      nftCa: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isListed(
      nftCa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listNft(address,address,uint8)"(
      nftCa: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      creatorFeeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "listNft(address)"(
      nftCa: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxTicketAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTicketPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeNumerator(
      feeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTicketAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinTicketPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
