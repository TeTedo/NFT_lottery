/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Raffle {
  export type RaffleInfoStruct = {
    raffleId: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    ticketPrice: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    leftTickets: PromiseOrValue<BigNumberish>;
    totalTickets: PromiseOrValue<BigNumberish>;
    nftCa: PromiseOrValue<string>;
    seller: PromiseOrValue<string>;
    winner: PromiseOrValue<string>;
  };

  export type RaffleInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    raffleId: BigNumber;
    tokenId: BigNumber;
    ticketPrice: BigNumber;
    endTime: BigNumber;
    leftTickets: BigNumber;
    totalTickets: BigNumber;
    nftCa: string;
    seller: string;
    winner: string;
  };
}

export interface RaffleInterface extends utils.Interface {
  functions: {
    "buyTickets(uint256,uint128)": FunctionFragment;
    "chooseWinnetr(uint256,uint256)": FunctionFragment;
    "claimAllNfts()": FunctionFragment;
    "getRaffleInfo(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyTickets"
      | "chooseWinnetr"
      | "claimAllNfts"
      | "getRaffleInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyTickets",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "chooseWinnetr",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllNfts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffleInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chooseWinnetr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllNfts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Raffle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RaffleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyTickets(
      raffleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chooseWinnetr(
      raffleId: PromiseOrValue<BigNumberish>,
      randNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAllNfts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRaffleInfo(
      raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Raffle.RaffleInfoStructOutput]>;
  };

  buyTickets(
    raffleId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chooseWinnetr(
    raffleId: PromiseOrValue<BigNumberish>,
    randNum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAllNfts(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRaffleInfo(
    raffleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Raffle.RaffleInfoStructOutput>;

  callStatic: {
    buyTickets(
      raffleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    chooseWinnetr(
      raffleId: PromiseOrValue<BigNumberish>,
      randNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAllNfts(overrides?: CallOverrides): Promise<void>;

    getRaffleInfo(
      raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Raffle.RaffleInfoStructOutput>;
  };

  filters: {};

  estimateGas: {
    buyTickets(
      raffleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chooseWinnetr(
      raffleId: PromiseOrValue<BigNumberish>,
      randNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAllNfts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRaffleInfo(
      raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTickets(
      raffleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chooseWinnetr(
      raffleId: PromiseOrValue<BigNumberish>,
      randNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAllNfts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRaffleInfo(
      raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
